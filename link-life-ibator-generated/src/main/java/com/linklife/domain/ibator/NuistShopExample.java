package com.linklife.domain.ibator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NuistShopExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    public NuistShopExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    protected NuistShopExample(NuistShopExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table nuist_shop
     *
     * @ibatorgenerated Sun Jul 12 13:22:20 CST 2015
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andShopIdIsNull() {
            addCriterion("shop_id is null");
            return this;
        }

        public Criteria andShopIdIsNotNull() {
            addCriterion("shop_id is not null");
            return this;
        }

        public Criteria andShopIdEqualTo(Integer value) {
            addCriterion("shop_id =", value, "shopId");
            return this;
        }

        public Criteria andShopIdNotEqualTo(Integer value) {
            addCriterion("shop_id <>", value, "shopId");
            return this;
        }

        public Criteria andShopIdGreaterThan(Integer value) {
            addCriterion("shop_id >", value, "shopId");
            return this;
        }

        public Criteria andShopIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("shop_id >=", value, "shopId");
            return this;
        }

        public Criteria andShopIdLessThan(Integer value) {
            addCriterion("shop_id <", value, "shopId");
            return this;
        }

        public Criteria andShopIdLessThanOrEqualTo(Integer value) {
            addCriterion("shop_id <=", value, "shopId");
            return this;
        }

        public Criteria andShopIdIn(List values) {
            addCriterion("shop_id in", values, "shopId");
            return this;
        }

        public Criteria andShopIdNotIn(List values) {
            addCriterion("shop_id not in", values, "shopId");
            return this;
        }

        public Criteria andShopIdBetween(Integer value1, Integer value2) {
            addCriterion("shop_id between", value1, value2, "shopId");
            return this;
        }

        public Criteria andShopIdNotBetween(Integer value1, Integer value2) {
            addCriterion("shop_id not between", value1, value2, "shopId");
            return this;
        }

        public Criteria andShopNameIsNull() {
            addCriterion("shop_name is null");
            return this;
        }

        public Criteria andShopNameIsNotNull() {
            addCriterion("shop_name is not null");
            return this;
        }

        public Criteria andShopNameEqualTo(String value) {
            addCriterion("shop_name =", value, "shopName");
            return this;
        }

        public Criteria andShopNameNotEqualTo(String value) {
            addCriterion("shop_name <>", value, "shopName");
            return this;
        }

        public Criteria andShopNameGreaterThan(String value) {
            addCriterion("shop_name >", value, "shopName");
            return this;
        }

        public Criteria andShopNameGreaterThanOrEqualTo(String value) {
            addCriterion("shop_name >=", value, "shopName");
            return this;
        }

        public Criteria andShopNameLessThan(String value) {
            addCriterion("shop_name <", value, "shopName");
            return this;
        }

        public Criteria andShopNameLessThanOrEqualTo(String value) {
            addCriterion("shop_name <=", value, "shopName");
            return this;
        }

        public Criteria andShopNameLike(String value) {
            addCriterion("shop_name like", value, "shopName");
            return this;
        }

        public Criteria andShopNameNotLike(String value) {
            addCriterion("shop_name not like", value, "shopName");
            return this;
        }

        public Criteria andShopNameIn(List values) {
            addCriterion("shop_name in", values, "shopName");
            return this;
        }

        public Criteria andShopNameNotIn(List values) {
            addCriterion("shop_name not in", values, "shopName");
            return this;
        }

        public Criteria andShopNameBetween(String value1, String value2) {
            addCriterion("shop_name between", value1, value2, "shopName");
            return this;
        }

        public Criteria andShopNameNotBetween(String value1, String value2) {
            addCriterion("shop_name not between", value1, value2, "shopName");
            return this;
        }

        public Criteria andShopAreaIsNull() {
            addCriterion("shop_area is null");
            return this;
        }

        public Criteria andShopAreaIsNotNull() {
            addCriterion("shop_area is not null");
            return this;
        }

        public Criteria andShopAreaEqualTo(Integer value) {
            addCriterion("shop_area =", value, "shopArea");
            return this;
        }

        public Criteria andShopAreaNotEqualTo(Integer value) {
            addCriterion("shop_area <>", value, "shopArea");
            return this;
        }

        public Criteria andShopAreaGreaterThan(Integer value) {
            addCriterion("shop_area >", value, "shopArea");
            return this;
        }

        public Criteria andShopAreaGreaterThanOrEqualTo(Integer value) {
            addCriterion("shop_area >=", value, "shopArea");
            return this;
        }

        public Criteria andShopAreaLessThan(Integer value) {
            addCriterion("shop_area <", value, "shopArea");
            return this;
        }

        public Criteria andShopAreaLessThanOrEqualTo(Integer value) {
            addCriterion("shop_area <=", value, "shopArea");
            return this;
        }

        public Criteria andShopAreaIn(List values) {
            addCriterion("shop_area in", values, "shopArea");
            return this;
        }

        public Criteria andShopAreaNotIn(List values) {
            addCriterion("shop_area not in", values, "shopArea");
            return this;
        }

        public Criteria andShopAreaBetween(Integer value1, Integer value2) {
            addCriterion("shop_area between", value1, value2, "shopArea");
            return this;
        }

        public Criteria andShopAreaNotBetween(Integer value1, Integer value2) {
            addCriterion("shop_area not between", value1, value2, "shopArea");
            return this;
        }
    }
}