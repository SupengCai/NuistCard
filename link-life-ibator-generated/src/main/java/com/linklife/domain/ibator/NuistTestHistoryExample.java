package com.linklife.domain.ibator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NuistTestHistoryExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    public NuistTestHistoryExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    protected NuistTestHistoryExample(NuistTestHistoryExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table nuist_test
     *
     * @ibatorgenerated Mon Feb 23 22:01:52 CST 2015
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andTestIdIsNull() {
            addCriterion("test_id is null");
            return this;
        }

        public Criteria andTestIdIsNotNull() {
            addCriterion("test_id is not null");
            return this;
        }

        public Criteria andTestIdEqualTo(Integer value) {
            addCriterion("test_id =", value, "testId");
            return this;
        }

        public Criteria andTestIdNotEqualTo(Integer value) {
            addCriterion("test_id <>", value, "testId");
            return this;
        }

        public Criteria andTestIdGreaterThan(Integer value) {
            addCriterion("test_id >", value, "testId");
            return this;
        }

        public Criteria andTestIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("test_id >=", value, "testId");
            return this;
        }

        public Criteria andTestIdLessThan(Integer value) {
            addCriterion("test_id <", value, "testId");
            return this;
        }

        public Criteria andTestIdLessThanOrEqualTo(Integer value) {
            addCriterion("test_id <=", value, "testId");
            return this;
        }

        public Criteria andTestIdIn(List values) {
            addCriterion("test_id in", values, "testId");
            return this;
        }

        public Criteria andTestIdNotIn(List values) {
            addCriterion("test_id not in", values, "testId");
            return this;
        }

        public Criteria andTestIdBetween(Integer value1, Integer value2) {
            addCriterion("test_id between", value1, value2, "testId");
            return this;
        }

        public Criteria andTestIdNotBetween(Integer value1, Integer value2) {
            addCriterion("test_id not between", value1, value2, "testId");
            return this;
        }

        public Criteria andXxxIsNull() {
            addCriterion("xxx is null");
            return this;
        }

        public Criteria andXxxIsNotNull() {
            addCriterion("xxx is not null");
            return this;
        }

        public Criteria andXxxEqualTo(String value) {
            addCriterion("xxx =", value, "xxx");
            return this;
        }

        public Criteria andXxxNotEqualTo(String value) {
            addCriterion("xxx <>", value, "xxx");
            return this;
        }

        public Criteria andXxxGreaterThan(String value) {
            addCriterion("xxx >", value, "xxx");
            return this;
        }

        public Criteria andXxxGreaterThanOrEqualTo(String value) {
            addCriterion("xxx >=", value, "xxx");
            return this;
        }

        public Criteria andXxxLessThan(String value) {
            addCriterion("xxx <", value, "xxx");
            return this;
        }

        public Criteria andXxxLessThanOrEqualTo(String value) {
            addCriterion("xxx <=", value, "xxx");
            return this;
        }

        public Criteria andXxxLike(String value) {
            addCriterion("xxx like", value, "xxx");
            return this;
        }

        public Criteria andXxxNotLike(String value) {
            addCriterion("xxx not like", value, "xxx");
            return this;
        }

        public Criteria andXxxIn(List values) {
            addCriterion("xxx in", values, "xxx");
            return this;
        }

        public Criteria andXxxNotIn(List values) {
            addCriterion("xxx not in", values, "xxx");
            return this;
        }

        public Criteria andXxxBetween(String value1, String value2) {
            addCriterion("xxx between", value1, value2, "xxx");
            return this;
        }

        public Criteria andXxxNotBetween(String value1, String value2) {
            addCriterion("xxx not between", value1, value2, "xxx");
            return this;
        }
    }
}