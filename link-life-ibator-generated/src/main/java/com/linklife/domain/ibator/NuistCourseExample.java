package com.linklife.domain.ibator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NuistCourseExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    public NuistCourseExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    protected NuistCourseExample(NuistCourseExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table nuist_course
     *
     * @ibatorgenerated Sun Jul 12 13:22:43 CST 2015
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andCourseIdIsNull() {
            addCriterion("course_id is null");
            return this;
        }

        public Criteria andCourseIdIsNotNull() {
            addCriterion("course_id is not null");
            return this;
        }

        public Criteria andCourseIdEqualTo(Integer value) {
            addCriterion("course_id =", value, "courseId");
            return this;
        }

        public Criteria andCourseIdNotEqualTo(Integer value) {
            addCriterion("course_id <>", value, "courseId");
            return this;
        }

        public Criteria andCourseIdGreaterThan(Integer value) {
            addCriterion("course_id >", value, "courseId");
            return this;
        }

        public Criteria andCourseIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("course_id >=", value, "courseId");
            return this;
        }

        public Criteria andCourseIdLessThan(Integer value) {
            addCriterion("course_id <", value, "courseId");
            return this;
        }

        public Criteria andCourseIdLessThanOrEqualTo(Integer value) {
            addCriterion("course_id <=", value, "courseId");
            return this;
        }

        public Criteria andCourseIdIn(List values) {
            addCriterion("course_id in", values, "courseId");
            return this;
        }

        public Criteria andCourseIdNotIn(List values) {
            addCriterion("course_id not in", values, "courseId");
            return this;
        }

        public Criteria andCourseIdBetween(Integer value1, Integer value2) {
            addCriterion("course_id between", value1, value2, "courseId");
            return this;
        }

        public Criteria andCourseIdNotBetween(Integer value1, Integer value2) {
            addCriterion("course_id not between", value1, value2, "courseId");
            return this;
        }

        public Criteria andCourseNameIsNull() {
            addCriterion("course_name is null");
            return this;
        }

        public Criteria andCourseNameIsNotNull() {
            addCriterion("course_name is not null");
            return this;
        }

        public Criteria andCourseNameEqualTo(String value) {
            addCriterion("course_name =", value, "courseName");
            return this;
        }

        public Criteria andCourseNameNotEqualTo(String value) {
            addCriterion("course_name <>", value, "courseName");
            return this;
        }

        public Criteria andCourseNameGreaterThan(String value) {
            addCriterion("course_name >", value, "courseName");
            return this;
        }

        public Criteria andCourseNameGreaterThanOrEqualTo(String value) {
            addCriterion("course_name >=", value, "courseName");
            return this;
        }

        public Criteria andCourseNameLessThan(String value) {
            addCriterion("course_name <", value, "courseName");
            return this;
        }

        public Criteria andCourseNameLessThanOrEqualTo(String value) {
            addCriterion("course_name <=", value, "courseName");
            return this;
        }

        public Criteria andCourseNameLike(String value) {
            addCriterion("course_name like", value, "courseName");
            return this;
        }

        public Criteria andCourseNameNotLike(String value) {
            addCriterion("course_name not like", value, "courseName");
            return this;
        }

        public Criteria andCourseNameIn(List values) {
            addCriterion("course_name in", values, "courseName");
            return this;
        }

        public Criteria andCourseNameNotIn(List values) {
            addCriterion("course_name not in", values, "courseName");
            return this;
        }

        public Criteria andCourseNameBetween(String value1, String value2) {
            addCriterion("course_name between", value1, value2, "courseName");
            return this;
        }

        public Criteria andCourseNameNotBetween(String value1, String value2) {
            addCriterion("course_name not between", value1, value2, "courseName");
            return this;
        }

        public Criteria andCourseSubjectIsNull() {
            addCriterion("course_subject is null");
            return this;
        }

        public Criteria andCourseSubjectIsNotNull() {
            addCriterion("course_subject is not null");
            return this;
        }

        public Criteria andCourseSubjectEqualTo(Integer value) {
            addCriterion("course_subject =", value, "courseSubject");
            return this;
        }

        public Criteria andCourseSubjectNotEqualTo(Integer value) {
            addCriterion("course_subject <>", value, "courseSubject");
            return this;
        }

        public Criteria andCourseSubjectGreaterThan(Integer value) {
            addCriterion("course_subject >", value, "courseSubject");
            return this;
        }

        public Criteria andCourseSubjectGreaterThanOrEqualTo(Integer value) {
            addCriterion("course_subject >=", value, "courseSubject");
            return this;
        }

        public Criteria andCourseSubjectLessThan(Integer value) {
            addCriterion("course_subject <", value, "courseSubject");
            return this;
        }

        public Criteria andCourseSubjectLessThanOrEqualTo(Integer value) {
            addCriterion("course_subject <=", value, "courseSubject");
            return this;
        }

        public Criteria andCourseSubjectIn(List values) {
            addCriterion("course_subject in", values, "courseSubject");
            return this;
        }

        public Criteria andCourseSubjectNotIn(List values) {
            addCriterion("course_subject not in", values, "courseSubject");
            return this;
        }

        public Criteria andCourseSubjectBetween(Integer value1, Integer value2) {
            addCriterion("course_subject between", value1, value2, "courseSubject");
            return this;
        }

        public Criteria andCourseSubjectNotBetween(Integer value1, Integer value2) {
            addCriterion("course_subject not between", value1, value2, "courseSubject");
            return this;
        }
    }
}